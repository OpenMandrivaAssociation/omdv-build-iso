--- omdv-build-iso-0.0.3/omdv-build-iso.sh	2015-01-24 17:53:04.000000000 +0000
+++ omdv-build-iso-0.0.3/omdv-build-iso.sh~	2015-02-18 21:34:36.000000000 +0000
@@ -1,8 +1,9 @@
 #!/bin/bash
-#set -x
+set -x
 # OpenMandriva Association 2012
 # Original author: Bernhard Rosenkraenzer <bero@lindev.ch>
 # Modified on 2014 by: Tomasz Paweł Gajc <tpgxyz@gmail.com>
+# Modified on 2015 by: Tomasz Paweł Gajc <tpgxyz@gmail.com>
 
 # This tool is licensed under GPL license
 #    This program is free software; you can redistribute it and/or modify
@@ -33,17 +34,18 @@
     echo " --tree= Branch of software repository: cooker, openmandriva2014.0"
     echo " --version= Version for software repository: 2015.0, 2014.1, 2014.0"
     echo " --release_id= Release identifer: alpha, beta, rc, final"
-    echo " --type= User environment type on ISO: KDE4, MATE, LXQt, IceWM, hawaii, xfce4, minimal"
-    echo " --displaymanager= Display Manager used in desktop environemt: KDM, GDM, LightDM, sddm, xdm"
+    echo " --type= User environment type on ISO: KDE4, MATE, LXQt, IceWM, hawaii, xfce4, weston, minimal"
+    echo " --displaymanager= Display Manager used in desktop environemt: KDM, GDM, LightDM, sddm, xdm, none"
     echo " --workdir= Set directory where ISO will be build"
     echo " --outputdir= Set destination directory to where put final ISO file"
+    echo " --nodeps= yes or y. Forces urpmi to ignore dependencys. A broken iso may be the result" 
     echo " --debug Enable debug output"
     echo ""
     echo "For example:"
     echo "omdv-build-iso.sh --arch=x86_64 --tree=cooker --version=2015.0 --release_id=alpha --type=lxqt --displaymanager=sddm"
     echo ""
     echo "Exiting."
-    exit 1
+#    exit 1
 }
 
 # use only allowed arguments
@@ -92,6 +94,9 @@
 			    xfce4)
 				TYPE=xfce4
 				;;
+			    weston)
+				TYPE=weston
+				;;
 			    minimal)
 				TYPE=minimal
 				;;
@@ -114,8 +119,12 @@
         	    OUTPUTDIR=${k#*=}
         	    shift
         	    ;;
-    		--debug)
-        	    DEBUG=debug
+	    	--no-deps=*)
+		    NODEPS=${k#*=}
+		    shift
+		    ;;
+		--debug)
+        	    DEBUG=nodebug
         	    shift
         	    ;;
         	--help)
@@ -131,10 +140,20 @@
     usage_help
 fi
 
+# We lose our cli variables when we invoke sudo so we save them 
+# and pass them to sudo when it is started. Also the user name is needed.
+
+OLDUSER="`echo ~ | awk 'BEGIN { FS="/" } {print $3}'`"
+SUDOVAR=""EXTARCH="$EXTARCH "TREE="$TREE "VERSION="$VERSION "RELEASE_ID="$RELEASE_ID "TYPE="$TYPE "DISPLAYMANAGER="$DISPLAYMANAGER "DEBUG="$DEBUG "WORKDIR="$WORKDIR "OUTPUTDIR="$OUTPUTDIR "NODEPS="$NODEPS "OLDUSER="$OLDUSER"
+
+
 # run only when root
 if [ "`id -u`" != "0" ]; then
     # We need to be root for umount and friends to work...
-    exec sudo $0 "$@"
+    # NOTE the following command will only work on OMDV for the first registered user
+    # this user is a member of the wheel group and has root privelidges 
+
+    exec sudo -E `echo $SUDOVAR` $0 "$@"
     echo Run me as root.
     exit 1
 fi
@@ -144,8 +163,35 @@
     ABF=1
     OURDIR=$(realpath $(dirname $0))
 else
-    OURDIR="/usr/share/omdv-build-iso"
-	# generate build id if runningoutside ABF
+	# For local builds put the working directory containing.
+	# the package lists into the $WORKDIR if it is defined.
+	# else default of the users $HOME so that they may.
+	# edit it when creating their own local spins.
+
+      	if [ -z $WORKDIR ]; then
+            if  [ -d ~/omdv-build-iso ]; then
+                OURDIR=~/omdv-build-iso
+            else
+                mkdir  ~/omdv-build-iso
+		OURDIR=~/omdv-build-iso
+                cp -r /usr/share/omdv-build-iso ~/
+                chown -R $OLDUSER:$OLDUSER $OURDIR
+            fi
+    	else
+        # For local builds put the working directory containing.
+        # the package lists into the $WORKDIR if it is defined.
+        # or to the local default of the users $HOME so that they may.
+        # edit it when creating thier own local spins.
+		if   	[ -d "$WORKDIR/omdv-build-iso" ]; then
+			OURDIR="$WORKDIR/omdv-build-iso"
+    		else
+        		OURDIR=mkdir -v "$WORKDIR/omdv-build-iso"
+			OURDIR="$WORKDIR/omdv-build-iso"
+        		cp -r /usr/share/omdv-build-iso/ "$WORKDIR"
+        		chown -R $OLDUSER:$OLDUSER "$WORKDIR/omdv-build-iso"
+   		fi
+	fi
+	# generate build id if running outside ABF
 	BUILD_ID=$(($RANDOM%9999+1000))
 fi
 
@@ -155,23 +201,33 @@
 [ -z "${TREE}" ] && TREE=cooker
 [ -z "${VERSION}" ] && VERSION="`date +%Y.0`"
 [ -z "${RELEASE_ID}" ] && RELEASE_ID=alpha
-[ -z "${DISPLAYMANAGER}" ] && DISPLAYMANAGER="KDM"
 [ -z "${DEBUG}" ] && DEBUG="nodebug"
 
 # always build free ISO
 FREE=1
 
-SUDO=sudo
+SUDO="sudo -E"
 [ "`id -u`" = "0" ] && SUDO=""
 LOGDIR="."
 # set up main working directory if it was not set up
 if [ -z "$WORKDIR" ]; then
-    WORKDIR="`mktemp -d /tmp/isobuildrootXXXXXX`"
+	if [ -z $ABF ];then
+		if [ -d ~/omv-build-chroot-$EXTARCH ]; then
+		WORKDIR=~/omv-build-chroot-$EXTARCH
+		echo $WORKDIR
+		else
+		mkdir ~/omv-build-chroot-$EXTARCH
+		WORKDIR=~/omv-build-chroot-$EXTARCH
+		fi
+	else
+	"`mktemp -d /$WORKDIR/isobuildrootXXXXXX`"
+	fi
 fi
 
 CHROOTNAME="$WORKDIR"/BASE
 ISOROOTNAME="$WORKDIR"/ISO
 ISO_DATE="`echo $(date -u +%Y-%m-%d-%H-%M-%S-00) | sed -e s/-//g`"
+
 # in case when i386 is passed, fall back to i586
 [ "$EXTARCH" = "i386" ] && EXTARCH=i586
 
@@ -205,9 +261,15 @@
     unset KERNEL_ISO
     unset UEFI
     unset MIRRORLIST
+if  [ -z $ABF ]; then
+    echo "Something went wrong. Exiting"
+    umountAll "$CHROOTNAME"
+    exit 1
+else
     umountAll "$CHROOTNAME"
     $SUDO rm -rf "$WORKDIR"
     exit 1
+fi
 }
 
 # Don't leave potentially dangerous stuff if we had to error out...
@@ -217,14 +279,14 @@
     #Force update of critical packages
 	if [ "$ABF" = "1" ]; then
 	    echo "We are inside ABF (www.abf.io)"
-	    urpmq --list-url
-	    urpmi.update -ff updates
+	    $SUDO urpmq --list-url
+	    $SUDO urpmi.update -ff updates
     # inside ABF, lxc-container which is used to run this script is based
     # on Rosa2012 which does not have cdrtools
-	    urpmi --no-verify-rpm perl-URPM dosfstools grub2 xorriso syslinux squashfs-tools 
+	    $SUDO urpmi --downloader wget --wget-options --auth-no-challenge --auto --no-suggests --no-verify-rpm --ignorearch perl-URPM dosfstools grub2 xorriso syslinux squashfs-tools
 	else
 	    echo "Building in user custom environment"
-	    urpmi --no-verify-rpm perl-URPM dosfstools grub2 xorriso syslinux grub2 squashfs-tools
+	    $SUDO urpmi --downloader wget --wget-options --auth-no-challenge --auto --no-suggests --no-verify-rpm --ignorearch perl-URPM dosfstools grub2 xorriso syslinux grub2 squashfs-tools
 	fi
 }
 
@@ -237,17 +299,22 @@
         BRANCH="$TREE$VERSION"
     fi
 
+    #Note that $OURDIR may be redefined during execution
     # update iso-pkg-lists from ABF if missing
+    # except where the build is local as they are supplied with the rpm
     if [ ! -d $OURDIR/iso-pkg-lists-$BRANCH ]; then
-	echo "Could not find $OURDIR/iso-pkg-lists-$BRANCH. Downloading from ABF."
-	# download iso packages lists from www.abf.io
-	PKGLIST="https://abf.io/openmandriva/iso-pkg-lists/archive/iso-pkg-lists-$BRANCH.tar.gz"
-	$SUDO wget --tries=10 -O iso-pkg-lists-$BRANCH.tar.gz --content-disposition $PKGLIST
-	$SUDO tar -xf iso-pkg-lists-$BRANCH.tar.gz
-	# Why not retain the unique list name it will help when people want their own spins ?
-	$SUDO rm -f iso-pkg-lists-$BRANCH.tar.gz
+        echo "Could not find $OURDIR/iso-pkg-lists-$BRANCH. Downloading from ABF."
+        # download iso packages lists from www.abf.io
+        PKGLIST="https://abf.io/openmandriva/iso-pkg-lists/archive/iso-pkg-lists-$BRANCH.tar.gz"
+        $SUDO  wget --tries=10 -O iso-pkg-lists-$BRANCH.tar.gz --content-disposition $PKGLIST ;echo "$HOME"
+        $SUDO tar -xf iso-pkg-lists-$BRANCH.tar.gz
+         # Don't delete the package lists if it's a local build
+         # Provide user option?.
+        if [ "$ABF"="1" ]; then
+        $SUDO rm -f iso-pkg-lists-$BRANCH.tar.gz
+        fi
     fi
-
+    
     # export file list
     FILELISTS="$OURDIR/iso-pkg-lists-$BRANCH/${DIST,,}-${TYPE,,}.lst"
 
@@ -345,8 +412,15 @@
 	$SUDO mount --bind /dev/pts "$CHROOTNAME"/dev/pts
 
 	# start rpm packages installation
-	echo "Start installing packages in $CHROOTNAME"
-	parsePkgList "$FILELISTS" | xargs $SUDO urpmi --urpmi-root "$CHROOTNAME" --download-all --no-suggests --no-verify-rpm --fastunsafe --ignoresize --nolock --auto
+	# Note added --allow-force --force options to allow building with broken X
+	if [ "$NODEPS"="yes" ]||[ "$NODEPS"="y" ]; then
+		echo "WARNING" Broken ISO may be the result of this option
+		echo "Start installing packages in $CHROOTNAME"
+		parsePkgList "$FILELISTS" | xargs $SUDO urpmi --urpmi-root "$CHROOTNAME" --download-all --no-suggests --no-verify-rpm --fastunsafe --ignoresize --nolock --auto --allow-force --force --allow-nodeps
+	else
+		echo "Start installing packages in $CHROOTNAME"
+		parsePkgList "$FILELISTS" | xargs $SUDO urpmi --urpmi-root "$CHROOTNAME" --download-all --no-suggests --no-verify-rpm --fastunsafe --ignoresize --nolock --auto 
+	fi
 
 	if [[ $? != 0 ]] && [ ${TREE,,} != "cooker" ]; then
 	    echo "Can not install packages from $FILELISTS";
@@ -426,10 +500,50 @@
 
 	# building initrd
 	$SUDO chroot "$CHROOTNAME" /usr/sbin/dracut -N -f /boot/initrd-$KERNEL_ISO.img $KERNEL_ISO
-	$SUDO ln -s ../boot/initrd-$KERNEL_ISO.img "$CHROOTNAME"/boot/initrd0.img
+	$SUDO ln -sf /boot/initrd-$KERNEL_ISO.img "$CHROOTNAME"/boot/initrd0.img
 
 }
 
+mkeitefi() {
+# Usage: mkeitefi <target_directory/image_name>.img <grub_support_files_directory> <grub2 efi executable>
+# Creates a fat formatted file ifilesystem image which will boot an UEFI system. 
+
+	IMGNME="$ISOROOTNAME"/boot/syslinux/efiboot.img
+        GRB2FLS="$ISOROOTNAME"/EFI/BOOT
+
+# Get sizes of the required EFI files in blocks.
+# efipartsize  must be large enough to accomodate a gpt partition tables as well as the data.
+# each table is 17408 and there are two of them.
+	efipartsize=`du -s --block-size=2048 "$ISOROOTNAME/EFI" | awk '{print $1}'`
+	parttablesize=`echo "scale=0; (((2*17408)+2048)/2048)" | bc`
+	PARTSIZE=`echo "$parttablesize+$efipartsize+2048" | bc`
+
+# Create the image.
+	dd if=/dev/zero of=$IMGNME  bs=2048 count=$PARTSIZE
+	losetup -D
+# Mount the file on the loopback device. 
+        LDEV=`losetup -f --show $IMGNME`
+
+# Create a dos filesystem
+        mkdosfs  -S 2048 $LDEV
+sleep 1
+# Re-read the devive
+        losetup -D
+        losetup -f $IMGNME $LDEV
+        mount -t vfat $LDEV /mnt
+
+# copy the files
+	mkdir -p /mnt/EFI/BOOT
+        cp -R $GRB2FLS/* /mnt/EFI/BOOT/
+#	cp /home/colin/vnice /mnt/EFI/BOOT/
+	echo "Made" >/mnt/EFI/BOOT/vnice
+# Unmout the filesystem
+        umount /mnt
+
+# Clean up
+	losetup -D
+}
+
 # Usage: setupGrub2 /target/dir
 # Sets up grub2 to boot /target/dir
 setupGrub2() {
@@ -499,13 +613,12 @@
 	if [ -f "$1"/boot/efi/EFI/openmandriva/grub.efi ] && [ "$EXTARCH" = "x86_64" ]; then
 		export UEFI=1
 		$SUDO mkdir -m 0755 -p "$2"/EFI/BOOT "$2"/EFI/BOOT/fonts "$2"/EFI/BOOT/themes "$2"/EFI/BOOT/locale
-#		$SUDO cp -f "$1"/boot/efi/EFI/openmandriva/grub.efi "$2"/EFI/BOOT/grub.efi
+		$SUDO cp -f "$1"/boot/efi/EFI/openmandriva/grub.efi "$2"/EFI/BOOT/grub.efi
 		#For bootable iso's we may need grub.efi as BOOTX64.efi
 		$SUDO cp -f "$1"/boot/efi/EFI/openmandriva/grub.efi "$2"/EFI/BOOT/BOOTX64.efi
 #		$SUDO chroot "$1" /usr/bin/grub2-mkstandalone  --directory="/usr/lib/grub/x86_64-efi/" --format="x86_64-efi" --compress=xz --output="$1"/EFI/BOOT/BOOTX64.efi /EFI/BOOT/grub.cfg
-#		$SUDO mv -f "$1"/EFI/BOOT/BOOTX64.efi "$2"/EFI/BOOT/BOOTX64.efi
 		$SUDO cp -f $OURDIR/EFI/grub.cfg "$2"/EFI/BOOT/BOOTX64.cfg
-#		$SUDO cp -f $OURDIR/EFI/grub.cfg "$2"/EFI/BOOT/grub.cfg
+		$SUDO cp -f $OURDIR/EFI/grub.cfg "$2"/EFI/BOOT/grub.cfg
 		$SUDO sed -i -e "s,@VERSION@,$VERSION,g" "$2"/EFI/BOOT/*.cfg
 		$SUDO sed -i -e "s,@LABEL@,$LABEL,g" "$2"/EFI/BOOT/*.cfg
 		$SUDO cp -a -f "$1"/boot/grub2/themes "$2"/EFI/BOOT/
@@ -516,7 +629,7 @@
 		#	$SUDO cp -f "$1"/boot/grub2/themes/*/$i "$2"/EFI/BOOT/fonts/$i
 		#done
 		# EFI options for xorriso
-		XORRISO_OPTIONS="${XORRISO_OPTIONS} -isohybrid-mbr "$2"/boot/syslinux/isohdpfx.bin -partition_offset 16  -eltorito-alt-boot -e EFI/BOOT/BOOTX64.efi -no-emul-boot -isohybrid-gpt-basdat -append_partition 2 0xef "$ISOROOTNAME"/EFI/BOOT/BOOTX64.efi"
+		XORRISO_OPTIONS="${XORRISO_OPTIONS} -isohybrid-mbr "$2"/boot/syslinux/isohdpfx.bin -partition_offset 16  -eltorito-alt-boot -e boot/syslinux/efiboot.img -no-emul-boot -isohybrid-gpt-basdat -append_partition 2 0xef "$ISOROOTNAME"/boot/syslinux/efiboot.img"
 	fi
 
 	echo "Create syslinux menu"
@@ -546,7 +659,7 @@
 
 	# set up default timezone
 	echo "Setting default timezone"
-	$SUDO ln -s ../usr/share/zoneinfo/Universal "$CHROOTNAME"/etc/localtime
+	$SUDO ln -sf /usr/share/zoneinfo/Universal "$CHROOTNAME"/etc/localtime
 
 	# try harder with systemd-nspawn
 	# version 215 and never has then --share-system option
@@ -577,8 +690,8 @@
 	$SUDO echo "imagesize = $(du -a -x -b -P "$CHROOTNAME" | tail -1 | awk '{print $1}')" >> "$CHROOTNAME"/etc/minsysreqs
 
 	# set up displaymanager
-	if [ "${TYPE,,}" != "minimal" ]; then
-		$SUDO chroot "$CHROOTNAME" systemctl enable ${DISPLAYMANAGER,,}.service 2> /dev/null || :
+	if [ "${TYPE,,}" != "minimal" ] && [ ${DISPLAYMANAGER,,} != "none" ]; then
+	    $SUDO ln -sf /lib/systemd/system/${DISPLAYMANAGER,,}.service "$CHROOTNAME"/etc/systemd/system/display-manager.service 2> /dev/null || :
 
 	    # Set reasonable defaults
 	    if  [ -e "$CHROOTNAME"/etc/sysconfig/desktop ]; then
@@ -635,7 +748,6 @@
 		    ;;
 		*)
 		    echo "${DISPLAYMANAGER,,} is not supported, autologin feature will be not enabled"
-		    error
 	    esac
 	fi
 
@@ -651,7 +763,7 @@
 
 	echo "Starting services setup."
 	#enable services
-	SERVICES_ENABLE=(systemd-networkd systemd-networkd-wait-online systemd-resolved systemd-timesyncd systemd-timedated NetworkManager sshd.socket cups chronyd acpid alsa atd avahi-daemon irqbalance netfs resolvconf rpcbind sound udev-post mandrake_everytime crond accounts-daemon tuned)
+	SERVICES_ENABLE=(systemd-networkd systemd-resolved systemd-timesyncd systemd-timedated NetworkManager sshd.socket cups org.cups.cupsd.path org.cups.cupsd.socket org.cups.cups-lpd.socket chronyd acpid alsa atd avahi-daemon irqbalance netfs resolvconf rpcbind sound udev-post mandrake_everytime crond accounts-daemon tuned)
 	# disable services
 	SERVICES_DISABLE=(pptp pppoe ntpd iptables ip6tables shorewall nfs-server mysqld abrtd mysql postfix)
 
@@ -659,14 +771,14 @@
 	    if [[ $i  =~ ^.*socket$|^.*path$|^.*target$|^.*timer$ ]]; then
 		if [ -e "$CHROOTNAME"/lib/systemd/system/$i ]; then
 		    echo "Enabling $i"
-		    ln -sf ../lib/systemd/system/$i "$CHROOTNAME"/etc/systemd/system/multi-user.target.wants/$i
+		    ln -sf /lib/systemd/system/$i "$CHROOTNAME"/etc/systemd/system/multi-user.target.wants/$i
 		else
 		    echo "Special service $i does not exist. Skipping."
 		fi
 	    elif [[ ! $i  =~ ^.*socket$|^.*path$|^.*target$|^.*timer$ ]]; then
 		if [ -e "$CHROOTNAME"/lib/systemd/system/$i.service ]; then
 		    echo "Enabling $i.service"
-		    ln -sf ../lib/systemd/system/$i.service "$CHROOTNAME"/etc/systemd/system/multi-user.target.wants/$i.service
+		    ln -sf /lib/systemd/system/$i.service "$CHROOTNAME"/etc/systemd/system/multi-user.target.wants/$i.service
 		else
 		    echo "Service $i does not exist. Skipping."
 		fi
@@ -743,10 +855,10 @@
 
 	# get back to real /etc/resolv.conf
 	$SUDO rm -f "$CHROOTNAME"/etc/resolv.conf
-	if [ "`cat /etc/release | grep -o 2014.0`" \< "2015.0" ]; then
-	    $SUDO ln -sf ../run/resolvconf/resolv.conf "$CHROOTNAME"/etc/resolv.conf
+	if [ "`cat $CHROOTNAME/etc/release | grep -o 2014.0`" == "2014.0" ]; then
+	    $SUDO ln -sf /run/resolvconf/resolv.conf "$CHROOTNAME"/etc/resolv.conf
 	else
-	    $SUDO ln -sf ../run/systemd/resolve/resolv.conf "$CHROOTNAME"/etc/resolv.conf
+	    $SUDO ln -sf /run/systemd/resolve/resolv.conf "$CHROOTNAME"/etc/resolv.conf
 	fi
 
 	# ldetect stuff
@@ -779,19 +891,31 @@
 # Usage: buildIso filename.iso rootdir
 # Builds an ISO file from the files in rootdir
 buildIso() {
-	echo "Starting ISO build."
-
+	echo "Starting ISO build." 
+	
 	if [ "$ABF" = "1" ]; then
-	    ISOFILE="$OURDIR/$PRODUCT_ID.$EXTARCH.iso"
+            ISOFILE="$OURDIR/$PRODUCT_ID.$EXTARCH.iso"
+	elif
+           [ -z "$OUTPUTDIR" ]; then
+           ISOFILE="/home/$OLDUSER/$PRODUCT_ID.$EXTARCH.iso"
 	else
-	    ISOFILE="$OUTPUTDIR/$PRODUCT_ID.$EXTARCH.iso"
+           ISOFILE="$OUTPUTDIR/$PRODUCT_ID.$EXTARCH.iso"
 	fi
 
 	if [ ! -x /usr/bin/xorriso ]; then
 	    echo "xorriso does not exists. Exiting."
 	    error
 	fi
-
+	
+#Before starting to build remove the old iso. xorriso is much slower to create an iso.
+# if it is overwriting an earlier copy. Also it's not clear whether this affects the.
+# contents or structure of the iso (see --append-partition in the man page)
+# Either way building the iso is 30 seconds quicker (for a 1G iso) if the old one is deleted.
+
+        echo "Removing old is"o
+        if [ -z "$ABF" ]&&[ -z "$ISOFILE" ]; then
+        rm "$ISOFILE"
+        fi
 	echo "Building ISO with options ${XORRISO_OPTIONS}"
 
 	$SUDO xorriso -as mkisofs -R -r -J -joliet-long -cache-inodes \
@@ -843,6 +967,7 @@
 createChroot
 createInitrd
 setupBootloader
+mkeitefi
 setupISOenv
 createSquash
 buildIso
