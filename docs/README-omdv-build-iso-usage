omdv-build-iso.sh 
GENERAL INFORMATION

ABF USE:
This utility has been revised and reworked to allow the conveniant production of localised iso's.
The use for ABf is unchanged and the script will work as previously in ABF if the script is invoked with ABF=1 set in the 
invoking environment.

LOCAL USE:
For local and developer use there are some changes which allow the built ISO to be customised different requirments.
There are three flags controlling this func

The contents of the ISO are controlled by a series build lists grouped under OMA release.
There are currently three sets of files collected under the follwing directories.
/iso-pkg-lists-3.0
/iso-pkg-lists-cooker

A typical directory structure will be.
./iso-pkg-lists-3.0
├── my.add
├── my.rmv
├── omdv_aspell.lst
├── omdv_calligra.lst
├── omdv_control.lst
├── omdv_core.lst
├── omdv_desktop.lst
├── omdv_devel.lst
├── omdv_drivers.lst
├── omdv_fcitx.lst
├── omdv_firefox.lst
├── omdv_fonts.lst
├── omdv_gstreamer.lst
├── omdv-icewm.lst
├── omdv_iso.lst
├── omdv_iso_minimal.lst
├── omdv_kde4_apps.lst
├── omdv-kde4.lst
├── omdv_krita.lst
├── omdv_libreoffice.lst
├── omdv_locales.lst
├── omdv-lxqt.lst
├── omdv_man-pages.lst
├── omdv-mate.lst
├── omdv-minimal.lst
├── omdv_myspell.lst
├── omdv-plasma.lst
├── omdv_ppp.lst
├── omdv_pulseaudio.lst
├── omdv_small_but_stuffed.lst
├── omdv_smplayer.lst
├── omdv_thunderbird.lst
├── omdv_utils.lst
├── omdv_vlc.lst
├── omdv-weston.lst
├── omdv_x11_extra.lst
└── omdv-xfce4.lst




The files "my.add and "my.rmv" may be used to add and remove packages to and from the standard builds; In addition a user created skip.list may be enabled 
by a command line flag to support the exclusion of files from the build when the testrepo and auto-update flags are used.
This useful when you may wish to update you iso to newer package versions but to exclude some packages which may be broken.

The my.add and my.rmv  files require the same syntax as the other iso package lists in that the %include .///directive [pkg list name] may be used.
The script is so designed that it will remove duplicates pulled in by other lists. Its is also possible to insert pathnames to individual rpms

It is possible then to build an iso that contains say KDE Plasma and xfce in the same iso without the need to comment out files 
from one or other of the lists. Rpm names added to my.add will be added, names in my.rmv will be removed.
In theory it should be possible to add file names or directory names to these lists though this has not been enabled yet 
it is the intention to provide this functionality. 

The program senses whether there has been a change and will update the build chroot with the changes when run.
File removal attempts try to take into account the previous setup. As an example if you start by adding 
say %include .///small_but_stuffed.lst to the my.add and build an iso and then you decide that you don't want that list 
so you add the line used my.add and put it into my.rmv and running the script again should result in reversion 
to the pre-add state. This is not however guarateed as sometime configuration files are not removed by the scripts 
but on the whole it works. Sometimes the unistall scripts do not remove certain settings. You should report these as bugs.

When building chroots there are occasions where debugging may be appropriate and sometimes messing about in the chroot 
can result in some corruption or some other muddle.
Remaking a chroot from the full package can take considerable time as all the packages have to be downloaded 
everytime the chroot is remade. To help with this difficulty two special flags are provided.

--noclean
Passing this flag either when the chroot is built or after an initial build is made preserves the chroot on subsequent builds 
and files will be added and removed from the existing build.

The --rebuild flag triggers a rebuild mode which is available for those circumstances where the chroot gets corrupted or you 
wish to clean out the leftovers from removed packages. Run with this flag will cause the chroot to be removed but all the 
previously downloaded rpms will be preserved. The chroot will be re-created by using the rpms that were previously downloaded.
You are advised to back up your local package lists from time to time.

--rebuild
This flag is only available if the program has previously been run with the --noclean flag set. After the first run all the rpms 
downloaded are retained in the rpm cache. These are not included on the iso but are moved awaya when the iso is built. 
If you need to rebuild the chroot because it has become broken for some reason using the already downloaded files is much 
faster particularly for those with slower connections. Normally this flag will delete the entire workdirectory and start 
with a clean slate rebuilding with the cached rpms and standard package lists. 
You are asked if you wish to retain your currrent package lists if you answer Yes to the question they will be restored 
to the work directory before the chroot is rebuilt. rpms that are not in the cache will be downloaded.
If you want to add files that are not in the OpenMandriva repositorys you can add additional repositories 
to your urpmi configuration (Such as your personal ABF repo) as a workaround for local files you may get some mileage 
by adding them to the rpm cache at /var/cache/urpmi/rpms/ and calling them by their full name from a package list.

--quicken
Developing iso spins can be quite time consuming and whilst the -noclean and --rebuild flags provide some speed ups 
for larger isos much time is spent producing the squashfs filesystem for incorporation in to the iso if you have plenty of diskspace 
the --quicken flag sets the squashfs binary to not compress the filesystem this can give a useful speed increase at the cost 
of a larger iso. This is intended just for testing.   

--debug
The debug flag enables the printing (and in some cases saving) of various lists that are created during the build process. 
In addition a list file diffing system in incorporated to allow review of changes to the iso's package lists. 
This part of the package is still under development though some of the functionality is already available. See the developer docs
for further information.

--keep
--urpmi-debug
--auto-update
--devmode
--testrepo
--enable-skiplist

Extras: There is a simple utility in the tool directory which will allow you to mount your chroot providing you have named it 
and it resides in your personal /home directory.